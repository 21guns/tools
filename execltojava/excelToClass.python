#coding=utf-8
#######################################################
#filename:test_xlrd.py
#author:defias
#date:xxxx-xx-xx
#function：读excel文件中的数据
#######################################################
import xlrd
from mako.template import Template
from mako.runtime import Context
from io import StringIO
import os

class Field(object):

    def __init__(self, name, comment, type, field, jdbcType, note):
        self.name = name
        self.comment = comment
        self.type = type
        self.field = field
        self.note = note

        self.jdbcType = jdbcType
        if (jdbcType == "INT") :
        	self.jdbcType = "INTEGER"
        elif (jdbcType == "BIGINT UNSIGNED"):
        	self.jdbcType = "BIGINT"
        elif (jdbcType == "DATETIME"):
        	self.jdbcType = "TIMESTAMP"



def convert(one_string, space_character, firstUpower = False):    #one_string:输入的字符串；space_character:字符串的间隔符，以其做为分隔标志
	string_list = str(one_string).split(space_character)    #将字符串转化为list
	if not firstUpower:
		first = string_list[0].lower()
	else:
		first = string_list[0].capitalize()
	# print(first)
	others = string_list[1:] 
	others_capital = [word.capitalize() for word in others]      #str.capitalize():将字符串的首字母转化为大写
	others_capital[0:0] = [first]
	hump_string = ''.join(others_capital)     #将list组合成为字符串，中间无连接符。
	return hump_string

def generate_enum_class(class_name,class_comment,fields,field_names,module_name,table_name,package_name,api):
	for field in fields:
		if field.name in ['type','status']:
			enums = []
			string_list = str(field.note).split('、')
			if len(string_list) > 0:
				for n in string_list:
					# if  len(n) >0:
					string_list = str(n).split('：')
					if len(string_list) ==2: 
						enums.append(Field(string_list[0], string_list[1], '', '','', ''))
					else:
						print(string_list)

			enum_class_name = class_name+field.name[0].upper() + field.name[1:]
			mapperTemplate = Template(filename='./enum.tl')
			buf = StringIO()
			ctx = Context(buf, class_name=enum_class_name, class_comment=class_comment, enums=enums,module_name=module_name, package_name=package_name)
			mapperTemplate.render_context(ctx)
			# print(buf.getvalue())
			dto_dir = api+'enums/'
			if not os.path.exists(dto_dir):
				os.makedirs(dto_dir)
			f = open(dto_dir + enum_class_name+'Enum.java', 'w')
			f.write(buf.getvalue())
			f.close()

def generate_service_controller_repository(class_name,class_comment,fields,field_names,module_name,table_name,package_name,hasId,service,admin_contoller):
	if hasId :
		mapperTemplate = Template(filename='./commandService.tl')
		buf = StringIO()
		ctx = Context(buf, class_name=class_name, entity_name=class_name+"DTO", module_name=module_name, package_name=package_name)
		mapperTemplate.render_context(ctx)
		# print(buf.getvalue())
		service_dir = service + 'command/'
		if not os.path.exists(service_dir):
			os.makedirs(service_dir)
		f = open(service_dir + class_name+'CommandService.java', 'w')
		f.write(buf.getvalue())
		f.close()

		mapperTemplate = Template(filename='./commandServiceImpl.tl')
		buf = StringIO()
		ctx = Context(buf, class_name=class_name, entity_name=class_name+"DTO", module_name=module_name, package_name=package_name)
		mapperTemplate.render_context(ctx)
		# print(buf.getvalue())
		service_dir = service+'command/impl/'
		if not os.path.exists(service_dir):
			os.makedirs(service_dir)
		f = open(service_dir + class_name+'CommandServiceImpl.java', 'w')
		f.write(buf.getvalue())
		f.close()

		mapperTemplate = Template(filename='./repository.tl')
		buf = StringIO()
		ctx = Context(buf, class_name=class_name, entity_name=class_name+"DTO", module_name=module_name, package_name=package_name)
		mapperTemplate.render_context(ctx)
		# print(buf.getvalue())
		service_dir = service + 'repository/'
		if not os.path.exists(service_dir):
			os.makedirs(service_dir)
		f = open(service_dir + class_name+'Repository.java', 'w')
		f.write(buf.getvalue())
		f.close()

		mapperTemplate = Template(filename='./repositoryImpl.tl')
		buf = StringIO()
		ctx = Context(buf, class_name=class_name, entity_name=class_name+"DTO", module_name=module_name, package_name=package_name)
		mapperTemplate.render_context(ctx)
		# print(buf.getvalue())
		service_dir = service+'repository/impl/'
		if not os.path.exists(service_dir):
			os.makedirs(service_dir)
		f = open(service_dir + class_name+'RepositoryImpl.java', 'w')
		f.write(buf.getvalue())
		f.close()

		mapperTemplate = Template(filename='./queryService.tl')
		buf = StringIO()
		ctx = Context(buf, class_name=class_name, entity_name=class_name+"DTO", module_name=module_name, package_name=package_name)
		mapperTemplate.render_context(ctx)
		# print(buf.getvalue())
		service_dir = service + 'query/'
		if not os.path.exists(service_dir):
			os.makedirs(service_dir)
		f = open(service_dir + class_name+'QueryService.java', 'w')
		f.write(buf.getvalue())
		f.close()

		mapperTemplate = Template(filename='./queryServiceImpl.tl')
		buf = StringIO()
		ctx = Context(buf, class_name=class_name, entity_name=class_name+"DTO", module_name=module_name, package_name=package_name)
		mapperTemplate.render_context(ctx)
		# print(buf.getvalue())
		service_dir = service+'query/impl/'
		if not os.path.exists(service_dir):
			os.makedirs(service_dir)
		f = open(service_dir + class_name+'QueryServiceImpl.java', 'w')
		f.write(buf.getvalue())
		f.close()


		mapperTemplate = Template(filename='./adminController.tl')
		buf = StringIO()
		ctx = Context(buf, class_name=class_name, rest_url=class_name.lower(), module_name=module_name, class_comment=class_comment, package_name=package_name)
		mapperTemplate.render_context(ctx)
		# print(buf.getvalue())
		service_dir = admin_contoller+'controller/'
		if not os.path.exists(service_dir):
			os.makedirs(service_dir)
		f = open(service_dir + class_name+'AdminController.java', 'w')
		f.write(buf.getvalue())
		f.close()

def generate_do_dto(class_name,class_comment,fields,field_names,module_name,table_name,package_name,service,api):
	mapperTemplate = Template(filename='./entity.tl')
	buf = StringIO()
	ctx = Context(buf, class_name=class_name, class_comment=class_comment, fields=fields, hasId=False,module_name=module_name,table_name=table_name, package_name=package_name)
	mapperTemplate.render_context(ctx)
	# print(buf.getvalue())
	entity_dir = service+'entity/'
	if not os.path.exists(entity_dir):
		os.makedirs(entity_dir)
	f = open(entity_dir + class_name+'DO.java', 'w')
	f.write(buf.getvalue())
	f.close()

	mapperTemplate = Template(filename='./dto.tl')
	buf = StringIO()
	ctx = Context(buf, class_name=class_name, class_comment=class_comment, fields=fields, hasId=False,module_name=module_name, package_name=package_name)
	mapperTemplate.render_context(ctx)
	# print(buf.getvalue())
	dto_dir = api+'dto/'
	if not os.path.exists(dto_dir):
		os.makedirs(dto_dir)
	f = open(dto_dir + class_name+'DTO.java', 'w')
	f.write(buf.getvalue())
	f.close()

def generate_mapper_class(class_name,class_comment,fields,field_names,module_name,table_name,package_name,service):
	mapperTemplate = Template(filename='./mapper.tl')
	buf = StringIO()
	ctx = Context(buf, class_name=class_name, entity_name=class_name+"DO", module_name=module_name, package_name=package_name)
	mapperTemplate.render_context(ctx)
	# print(buf.getvalue())
	mapper_dir = service+'repository/mapper/'
	if not os.path.exists(mapper_dir):
		os.makedirs(mapper_dir)
	f = open(mapper_dir +class_name+'Mapper.java', 'w')
	f.write(buf.getvalue())
	f.close()

def generate_mapper_xml(class_name,class_comment,fields,field_names,module_name,table_name,package_name,service_resource):
	mapperTemplate = Template(filename='./mapperXml.tl')
	buf = StringIO()
	ctx = Context(buf, class_name=class_name, module_name=module_name,fields=fields, table_name=table_name, package_name=package_name)
	mapperTemplate.render_context(ctx)
	# print(buf.getvalue())
	mapper_dir = service_resource+'/com/'+package_name+'/'+module_name+'/service/repository/mapper/'
	if not os.path.exists(mapper_dir):
		os.makedirs(mapper_dir)
	f = open(mapper_dir +class_name+'Mapper.xml', 'w')
	f.write(buf.getvalue())
	f.close()

def write_java_file(class_name,class_comment,fields,field_names,module_name,table_name):
	# workspace_root='./code/'
	workspace_root='/Volumes/data/Develop/workspace/sft/'
	java_src = '/src/main/java'
	resource_src = '/src/main/resources/'
	package_name = 'sifangting'

	hasId = False
	if 'id' in field_names :	
		hasId = True
	api = workspace_root + module_name+'/api'+java_src+'/com/'+package_name+'/'+module_name+'/api/'
	service = workspace_root + module_name+'/service'+java_src+'/com/'+package_name+'/'+module_name+'/service/'
	admin_contoller = workspace_root + module_name+'/admin-controller'+java_src+'/com/'+package_name+'/'+module_name+'/admin/'
	contoller = workspace_root + module_name+'/controller'+java_src+'/com/'+package_name+'/'+module_name+'/'

	service_resource = workspace_root + module_name+'/service'+resource_src
	# if not os.path.exists(api):
	# 	os.makedirs(api+'dto/')
	# if not os.path.exists(service):
	# 	os.makedirs(service+'entity/')
	# 	os.makedirs(service+'service/impl')
	# 	os.makedirs(service+'repository/mapper/')
	# if not os.path.exists(admin_contoller):
	# 	os.makedirs(admin_contoller)
	# if not os.path.exists(contoller):
	# 	os.makedirs(contoller)
	generate_enum_class_flag = False
	generate_do_dto_flag = False
	generate_service_controller_repository_flag = False
	generate_mapper_class_flag = False
	generate_mapper_xml_flag = True

	if generate_enum_class_flag :
		generate_enum_class(class_name,class_comment,fields,field_names,module_name,table_name,package_name,api)

	if generate_do_dto_flag :
		generate_do_dto(class_name,class_comment,fields,field_names,module_name,table_name,package_name,service,api)

	if generate_mapper_class_flag :
		generate_mapper_class(class_name,class_comment,fields,field_names,module_name,table_name,package_name,service)

	if generate_mapper_xml_flag :
		generate_mapper_xml(class_name,class_comment,fields,field_names,module_name,table_name,package_name,service_resource)

	if generate_service_controller_repository_flag :
		generate_service_controller_repository(class_name,class_comment,fields,field_names,module_name,table_name,package_name,hasId,service,admin_contoller)


#打开一个workbook
workbook = xlrd.open_workbook('./数据结构.xlsx')
#抓取所有sheet页的名称
worksheets = workbook.sheet_names()
print('worksheets is %s' %worksheets)

for sheet_name in worksheets:
	if sheet_name in ['user']:
		continue
	print(sheet_name)
	module_name = sheet_name
	worksheet = workbook.sheet_by_name(sheet_name)
	num_rows = worksheet.nrows
	num_cols = worksheet.ncols
	fields = []
	field_names = []
	table_name = ''
	#遍历sheet1中所有单元格cell
	for rown in range(1, num_rows): 

		if len(worksheet.cell_value(rown,1)) > 0:
			fields = []
			field_names = []
			# print(worksheet.cell_value(rown,1))
			table_name = worksheet.cell_value(rown,1).split("\n")[1]
			class_name = convert(table_name,"_",True) 
			class_comment = worksheet.cell_value(rown,1).split("\n")[0]
			# class_str = class_str + class_name + "DO" + " extends AbstractEntity { \n"
		# for coln in range(3,4):
		cell = worksheet.cell_value(rown,3)
		if len(cell.strip()) <= 0:
			continue
		cell_type = worksheet.cell_value(rown,4)
		# print(cell_type)
		filed_type = "Object"
		if "VARCHAR" in cell_type:
			filed_type = "String"
		elif "TINYINT" in cell_type:
			filed_type = "Byte"
		elif "DATETIME" in cell_type:
			filed_type = "LocalDateTime"
		elif "DATE" in cell_type:
			filed_type = "LocalDate"
		elif "DECIMAL" in cell_type:
			filed_type = "BigDecimal"
		elif "INT" == cell_type:
			filed_type = "Integer"
		elif "INT(11)" == cell_type:
			filed_type = "Integer"
		elif "BIGINT UNSIGNED" == cell_type:
			filed_type = "Long"
		else:
			print(table_name, cell, filed_type, cell_type)
		# if cell not in ["id","gmt_created","gmt_modified"]:
			# fields.append(Field(convert(cell,"_"), worksheet.cell_value(rown,2), filed_type ))
		fields.append(Field(convert(cell,"_"), worksheet.cell_value(rown,2), filed_type, cell, cell_type.split('(')[0], worksheet.cell_value(rown,10) ))
		field_names.append(convert(cell,"_"))
		try:
			# print(rown,num_rows)
			if len(worksheet.cell_value(rown+1,1)) > 0:
				write_java_file(class_name,class_comment,fields,field_names,module_name,table_name)
		except IndexError as e:
			print('IndexError:', e)

	write_java_file(class_name,class_comment,fields,field_names,module_name,table_name)


#定位到sheet1
# worksheet = workbook.sheet_by_name(u'mall')
"""
#通过索引顺序获取
worksheet = workbook.sheets()[0]
#或
worksheet = workbook.sheet_by_index(0)
"""
# num_rows = worksheet.nrows
# num_cols = worksheet.ncols
"""
#遍历所有sheet对象
for worksheet_name in worksheets:
worksheet = workbook.sheet_by_name(worksheet_name)

#遍历sheet1中所有行row

for curr_row in range(num_rows):
	row = worksheet.row_values(curr_row)
	print('row%s is %s' %(curr_row,row))
#遍历sheet1中所有列col

for curr_col in range(num_cols):
	col = worksheet.col_values(curr_col)
	print('col%s is %s' %(curr_col,col))
"""

"""
#其他写法：
cell = worksheet.cell(rown,coln).value
print cell
#或
cell = worksheet.row(rown)[coln].value
print cell
#或
cell = worksheet.col(coln)[rown].value
print cell
#获取单元格中值的类型，类型 0 empty,1 string, 2 number, 3 date, 4 boolean, 5 error
cell_type = worksheet.cell_type(rown,coln)
print cell_type
"""
